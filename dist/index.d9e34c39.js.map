{"mappings":"ACAA,KAAK,cAAc,CAAC,iBACpB,MAAM,EAAW,SAAS,gBAAgB,CAAC,YAErC,EAAS,AAAC,GAAQ,CAAG,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAI,MAAM,EAAE,CAC7D,EAAQ,AAAC,GAAS,IAAI,QAAQ,AAAC,GAAY,WAAW,EAAS,IAC/D,EAAgB,CACrB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,KAEC,IAAI,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAU,CACpE,IAAK,IAAI,EAAI,EAAW,EAAG,GAAK,EAAG,IAAK,CACtC,IAAM,EAAQ,KAAK,KAAK,CAAC,MAAM,CAAC,EAAU,GACpC,EAAW,KAAK,KAAK,CAAC,MAAM,CAAC,EAAa,GAC1C,EAAW,SAAS,aAAa,CAAC,OACxC,EAAS,KAAK,CAAC,WAAW,CAAC,mBAAoB,EAAO,IACtD,EAAQ,WAAW,CAAC,GACpB,KAAK,GAAG,CAAC,EAAU,CACjB,QAAS,EACT,MAAO,KAAK,KAAK,CAAC,MAAM,CAAC,GAAK,IAC9B,EAAA,EACA,EAAA,CACF,GACA,IAAM,EAAK,KAAK,QAAQ,CAAC,CACvB,aACE,EAAS,MAAM,EACjB,CACF,GACA,EAAG,EAAE,CACH,EACA,CACE,QAAS,EACT,SAAU,GACZ,EACA,GAEC,EAAE,CACD,EACA,CACE,UAAW,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,IAAU,MAAU,CAAC,CACvD,UAAW,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,IAAU,MAAU,CAAC,CACvD,UAAW,CACT,MAAA,EACA,SAAA,EACA,QAAA,CACF,EACA,SAAU,CACZ,EACA,GAED,EAAE,CACD,EACA,CACE,QAAS,EACT,SAAU,CACZ,EACA,GAEN,CACF,EAEM,EAAQ,UACZ,IAAK,IAAM,KAAW,EACpB,EAAc,EAAS,IAAK,GAAI,EAAG,EAAG,IAAK,GAAI,IAAK,IACpD,MAAM,EAAM,IAEhB,EAEA,G,4D","sources":["<anon>","script.js"],"sourcesContent":["gsap.registerPlugin(Physics2DPlugin);\nconst emitters = document.querySelectorAll(\".emitter\");\nconst turn = 360;\nconst sample = (arr)=>arr[Math.floor(Math.random() * arr.length)];\nconst sleep = (time)=>new Promise((resolve)=>setTimeout(resolve, time));\nconst makeParticles = (emitter, quantity, x, y, minAngle, maxAngle, minVelocity, maxVelocity, gravity)=>{\n    let colors = [\n        \"#4ec0e9\",\n        \"#ffce52\",\n        \"#ed5464\",\n        \"#8e44ad\",\n        \"#2ecc71\"\n    ];\n    for(let i = quantity - 1; i >= 0; i--){\n        const angle = gsap.utils.random(minAngle, maxAngle);\n        const velocity = gsap.utils.random(minVelocity, maxVelocity);\n        const particle = document.createElement(\"div\");\n        particle.style.setProperty(\"--particle-color\", sample(colors));\n        emitter.appendChild(particle);\n        gsap.set(particle, {\n            opacity: 0,\n            scale: gsap.utils.random(0.3, 0.8),\n            x,\n            y\n        });\n        const t1 = gsap.timeline({\n            onComplete () {\n                particle.remove();\n            }\n        });\n        t1.to(particle, {\n            opacity: 1,\n            duration: 0.05\n        }, 0).to(particle, {\n            rotationX: `+=${gsap.utils.random(2 * turn, 4 * turn)}`,\n            rotationZ: `+=${gsap.utils.random(2 * turn, 4 * turn)}`,\n            physics2D: {\n                angle,\n                velocity,\n                gravity\n            },\n            duration: 2\n        }, 0).to(particle, {\n            opacity: 0,\n            duration: 1\n        }, 0.8);\n    }\n};\nconst start = async ()=>{\n    for (const emitter of emitters){\n        makeParticles(emitter, 200, -4, 6, 0, 360, 60, 120, 60);\n        await sleep(500);\n    }\n};\nstart();\n\n//# sourceMappingURL=index.d9e34c39.js.map\n","gsap.registerPlugin(Physics2DPlugin);\r\nconst emitters = document.querySelectorAll(\".emitter\");\r\nconst turn = 360;\r\nconst sample = (arr) => arr[Math.floor(Math.random() * arr.length)];\r\nconst sleep = (time) => new Promise((resolve) => setTimeout(resolve, time));\r\nconst makeParticles = (\r\n\temitter,\r\n\tquantity,\r\n\tx,\r\n\ty,\r\n\tminAngle,\r\n\tmaxAngle,\r\n\tminVelocity,\r\n\tmaxVelocity,\r\n\tgravity\r\n) => {\r\n  let colors = [\"#4ec0e9\", \"#ffce52\", \"#ed5464\", \"#8e44ad\", \"#2ecc71\"];\r\n  for (let i = quantity - 1; i >= 0; i--) {\r\n    const angle = gsap.utils.random(minAngle, maxAngle);\r\n    const velocity = gsap.utils.random(minVelocity, maxVelocity);\r\n    const particle = document.createElement(\"div\");\r\n    particle.style.setProperty(\"--particle-color\", sample(colors));\r\n    emitter.appendChild(particle);\r\n    gsap.set(particle, {\r\n      opacity: 0,\r\n      scale: gsap.utils.random(0.3, 0.8),\r\n      x,\r\n      y\r\n    });\r\n    const t1 = gsap.timeline({\r\n      onComplete() {\r\n        particle.remove();\r\n      }\r\n    });\r\n    t1.to(\r\n      particle,\r\n      {\r\n        opacity: 1,\r\n        duration: 0.05\r\n      },\r\n      0\r\n    )\r\n      .to(\r\n        particle,\r\n        {\r\n          rotationX: `+=${gsap.utils.random(2 * turn, 4 * turn)}`,\r\n          rotationZ: `+=${gsap.utils.random(2 * turn, 4 * turn)}`,\r\n          physics2D: {\r\n            angle,\r\n            velocity,\r\n            gravity\r\n          },\r\n          duration: 2\r\n        },\r\n        0\r\n      )\r\n      .to(\r\n        particle,\r\n        {\r\n          opacity: 0,\r\n          duration: 1\r\n        },\r\n        0.8\r\n      );\r\n  }\r\n};\r\n\r\nconst start = async () => {\r\n  for (const emitter of emitters) {\r\n    makeParticles(emitter, 200, -4, 6, 0, 360, 60, 120, 60);\r\n    await sleep(500);\r\n  }\r\n};\r\n\r\nstart();"],"names":["gsap","registerPlugin","Physics2DPlugin","emitters","document","querySelectorAll","sample","arr","Math","floor","random","length","sleep","time","Promise","resolve","setTimeout","makeParticles","emitter","quantity","x","y","minAngle","maxAngle","minVelocity","maxVelocity","gravity","colors","i","angle","utils","velocity","particle","createElement","style","setProperty","appendChild","set","opacity","scale","t1","timeline","onComplete","remove","to","duration","rotationX","rotationZ","physics2D","start"],"version":3,"file":"index.d9e34c39.js.map"}